#include <ros/ros.h>
#include <geometry_msgs/Twist.h>
#include <trajectory_msgs/JointTrajectory.h>
#include <stdio.h>

ros::Publisher jt_pub;
ros::Subscriber sub;
	trajectory_msgs::JointTrajectory jt;
void twistCallback( const geometry_msgs::Twist::ConstPtr& twist)
{
	double jointVel = (double)twist->angular.z * 20.0;
			ROS_INFO("constt");

	jt.points.reserve(2);
			ROS_INFO("points");
	jt.points[0].velocities.reserve(2);
			ROS_INFO("vel");
	jt.joint_names.reserve(2);
				ROS_INFO("names");
	jt.joint_names[0]="1";
			ROS_INFO("assign name");
	jt.points[0].velocities[0]=jointVel;
	
		ROS_INFO("%d",sizeof(jt));



	jt_pub.publish(jt);
}

int main(int argc, char** argv)
{
    ros::init(argc,argv,"UGV_main");
    ros::NodeHandle nh;
    jt_pub = nh.advertise<trajectory_msgs::JointTrajectory>("joint_trajectory",1);
    sub=nh.subscribe<geometry_msgs::Twist>("Input/cmd_vel",10, &twistCallback);
    
	ros::spin();
	
	return 0;


}
